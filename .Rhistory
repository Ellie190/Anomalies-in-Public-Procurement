hc_yAxis(title = list(text = "Average Bid Price"))
top5_bids %>%
hchart("column", hcaes(x = `Contact  Name`, y = average_bid_price)) %>%
hc_title(
text = paste0("Top 5 Contact Name Average Bid Price")) %>%
hc_colors("green") %>%
hc_xAxis(title = list(text = "Contact Name")) %>%
hc_yAxis(title = list(text = "Average Bid Price"))
# Top 5 Highest Average Bid Contact Name
bottom5_bids <- bid_category_df %>%
tail(5)
bottom5_bids
bottom5_bids %>%
hchart("column", hcaes(x = `Contact  Name`, y = average_bid_price)) %>%
hc_title(
text = paste0("Top 5 Contact Name Average Bid Price")) %>%
hc_colors("green") %>%
hc_xAxis(title = list(text = "Contact Name")) %>%
hc_yAxis(title = list(text = "Average Bid Price"))
# Top 5 Contact Names According to Average Bid Price
bid_category_df <- df %>% group_by(`Bid Title`) %>%
summarise(average_bid_price = round(mean(`Bid Price`),2)) %>%
arrange(desc(average_bid_price))
bid_category_df
# Top 5 Highest Average Bid Contact Name
top5_bids <- bid_category_df %>%
head(5)
top5_bids
# Top 5 Highest Average Bid Contact Name
bottom5_bids <- bid_category_df %>%
tail(5)
bottom5_bids
top5_bids %>%
hchart("column", hcaes(x = `Contact  Name`, y = average_bid_price)) %>%
hc_title(
text = paste0("Top 5 Contact Name Average Bid Price")) %>%
hc_colors("green") %>%
hc_xAxis(title = list(text = "Contact Name")) %>%
hc_yAxis(title = list(text = "Average Bid Price"))
top5_bids %>%
hchart("column", hcaes(x = `Bid Title`, y = average_bid_price)) %>%
hc_title(
text = paste0("Top 5 Contact Name Average Bid Price")) %>%
hc_colors("green") %>%
hc_xAxis(title = list(text = "Contact Name")) %>%
hc_yAxis(title = list(text = "Average Bid Price"))
bottom5_bids %>%
hchart("column", hcaes(x = `Contact  Name`, y = average_bid_price)) %>%
hc_title(
text = paste0("Top 5 Contact Name Average Bid Price")) %>%
hc_colors("green") %>%
hc_xAxis(title = list(text = "Contact Name")) %>%
hc_yAxis(title = list(text = "Average Bid Price"))
bottom5_bids %>%
hchart("column", hcaes(x = `Bid Title`, y = average_bid_price)) %>%
hc_title(
text = paste0("Top 5 Contact Name Average Bid Price")) %>%
hc_colors("green") %>%
hc_xAxis(title = list(text = "Contact Name")) %>%
hc_yAxis(title = list(text = "Average Bid Price"))
# Top 5 Highest Average Bid Contact Name
top5_bids <- bid_category_df %>%
head(10)
top5_bids
# Top 5 Highest Average Bid Contact Name
bottom5_bids <- bid_category_df %>%
tail(10)
bottom5_bids
top5_bids %>%
hchart("column", hcaes(x = `Bid Title`, y = average_bid_price)) %>%
hc_title(
text = paste0("Top 5 Contact Name Average Bid Price")) %>%
hc_colors("green") %>%
hc_xAxis(title = list(text = "Contact Name")) %>%
hc_yAxis(title = list(text = "Average Bid Price"))
bottom5_bids %>%
hchart("column", hcaes(x = `Bid Title`, y = average_bid_price)) %>%
hc_title(
text = paste0("Top 5 Contact Name Average Bid Price")) %>%
hc_colors("green") %>%
hc_xAxis(title = list(text = "Contact Name")) %>%
hc_yAxis(title = list(text = "Average Bid Price"))
# Top 5 Contact Names According to Average Bid Price
bid_category_df <- df %>% group_by(`Contact  Name`) %>%
summarise(average_bid_price = round(mean(`Bid Price`),2)) %>%
arrange(desc(average_bid_price))
bid_category_df
# Top 5 Highest Average Bid Contact Name
top5_bids <- bid_category_df %>%
head(5)
top5_bids
# Top 5 Highest Average Bid Contact Name
bottom5_bids <- bid_category_df %>%
tail(5)
bottom5_bids
top5_bids %>%
hchart("column", hcaes(x = `Contact  Name`, y = average_bid_price)) %>%
hc_title(
text = paste0("Top 5 Contact Name Average Bid Price")) %>%
hc_colors("green") %>%
hc_xAxis(title = list(text = "Contact Name")) %>%
hc_yAxis(title = list(text = "Average Bid Price"))
bottom5_bids %>%
hchart("column", hcaes(x = `Contact  Name`, y = average_bid_price)) %>%
hc_title(
text = paste0("Top 5 Contact Name Average Bid Price")) %>%
hc_colors("green") %>%
hc_xAxis(title = list(text = "Contact Name")) %>%
hc_yAxis(title = list(text = "Average Bid Price"))
fig <- df %>%
plot_ly(
x = ~`Bid Price`,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Bid Price')
fig <- fig %>%
layout(
title = "Distribution of Bid Price",
yaxis = list(title = "%", zeroline = F))
fig
fig <- df %>%
plot_ly(
x = ~`Bid Price`,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Bid Price')
fig <- fig %>%
layout(
title = "Distribution of Bid Price",
xaxis = list(title = "%", zeroline = F))
fig
fig <- df %>%
plot_ly(
y = ~`Bid Price`,
type = 'violin',
box = list(visible = T),meanline = list(visible = T), x0 = 'Bid Price')
fig <- fig %>%
layout(
title = "Distribution of Bid Price",
yaxis = list(title = "%", zeroline = F))
fig
most_popular_bid_df <- df %>% group_by(`Contact  Name`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
most_popular_bid_df
most_popular_bid_df$`Contact  Name`[0]
most_popular_bid_df$`Contact  Name`[1]
most_popular_bid_df$requests[1]
paste0(most_popular_bid_df$`Contact  Name`[1], most_popular_bid_df$requests[1])
paste0(most_popular_bid_df$`Contact  Name`[1],paste0(" :", most_popular_bid_df$requests[1]))
paste0(most_popular_bid_df$`Contact  Name`[1],paste0(": ", most_popular_bid_df$requests[1]))
paste0(most_popular_bid_df$`Contact  Name`[1],paste0(" : ", most_popular_bid_df$requests[1]))
most_popular_bid_df1 <- df %>% group_by(`Contact  Name`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
cn <- paste0(most_popular_bid_df$`Contact  Name`[1],paste0(" : ", most_popular_bid_df$requests[1]))
cn
most_popular_bid_df1 <- df %>% group_by(`Bid Title`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bt <- paste0(most_popular_bid_df$`Bid Title`[1],paste0(" : ", most_popular_bid_df$requests[1]))
bt
most_popular_bid_df1 <- df %>% group_by(`Bid Title`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bt <- paste0(most_popular_bid_df1$`Bid Title`[1],paste0(" : ", most_popular_bid_df1$requests[1]))
bt
most_popular_bid_df2 <- df %>% group_by(`Bid Item`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bt <- paste0(most_popular_bid_df2$`Bid Title`[1],paste0(" : ", most_popular_bid_df2$requests[1]))
bt
most_popular_bid_df2 <- df %>% group_by(`Bid Item`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bt <- paste0(most_popular_bid_df2$`Bid Item`[1],paste0(" : ", most_popular_bid_df2$requests[1]))
bt
most_popular_bid_df2 <- df %>% group_by(`Bid Item`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bt <- paste0(most_popular_bid_df2$`Bid Item`[1],paste0(" -Bids : ", most_popular_bid_df2$requests[1]))
bt
most_popular_bid_df2 <- df %>% group_by(`Bid Item`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bt <- paste0(most_popular_bid_df2$`Bid Item`[1],paste0(" - Bids : ", most_popular_bid_df2$requests[1]))
bt
most_popular_bid_df1 <- df %>% group_by(`Contact  Name`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
cn <- paste0(most_popular_bid_df$`Contact  Name`[1],paste0(" - Bids : ", most_popular_bid_df$requests[1]))
cn
most_popular_bid_df1 <- df %>% group_by(`Bid Title`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bt <- paste0(most_popular_bid_df1$`Bid Title`[1],paste0(" - Bids : ", most_popular_bid_df1$requests[1]))
bt
most_popular_bid_df2 <- df %>% group_by(`Bid Item`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bt <- paste0(most_popular_bid_df2$`Bid Item`[1],paste0(" - Bids : ", most_popular_bid_df2$requests[1]))
bt
most_popular_bid_df2 <- df %>% group_by(`Bid Item`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bi <- paste0(most_popular_bid_df2$`Bid Item`[1],paste0(" - Bids : ", most_popular_bid_df2$requests[1]))
bi
most_popular_bid_df3 <- df %>% group_by(`Bidder Name`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bi <- paste0(most_popular_bid_df3$`Bidder Name`[1],paste0(" - Bids : ", most_popular_bid_df3$requests[1]))
bi
most_popular_bid_df1 <- df %>% group_by(`Contact  Name`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
cn <- paste0(most_popular_bid_df$`Contact  Name`[1],paste0(" - Bids : ", most_popular_bid_df$requests[1]))
cn
most_popular_bid_df1 <- df %>% group_by(`Bid Title`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bt <- paste0(most_popular_bid_df1$`Bid Title`[1],paste0(" - Bids : ", most_popular_bid_df1$requests[1]))
bt
most_popular_bid_df2 <- df %>% group_by(`Bid Item`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bi <- paste0(most_popular_bid_df2$`Bid Item`[1],paste0(" - Bids : ", most_popular_bid_df2$requests[1]))
bi
most_popular_bid_df3 <- df %>% group_by(`Bidder Name`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
bn <- paste0(most_popular_bid_df3$`Bidder Name`[1],paste0(" - Bids : ", most_popular_bid_df3$requests[1]))
bn
most_popular_df <- as.data.frame(
Indicator = c("Contact Name", "Bid Title", "Bid Item", "Bidder Name"),
Most_Popular = c(cn, bt, bi, bn)
)
cn
most_popular_df <- as.data.frame(
Indicator = c("Contact Name", "Bid Title", "Bid Item", "Bidder Name"),
Most_Popular = c(cn, bt, bi, bn)
)
most_popular_df <- data.frame(
Indicator = c("Contact Name", "Bid Title", "Bid Item", "Bidder Name"),
Most_Popular = c(cn, bt, bi, bn)
)
most_popular_df
most_popular_bid_df1 <- df %>% group_by(`Contact  Name`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
cn <- most_popular_bid_df$`Contact  Name`[1]
cnb <- most_popular_bid_df$requests[1]
print(cn)
print(cnb)
most_popular_bid_df1 <- df %>% group_by(`Bid Title`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
#bt <- paste0(most_popular_bid_df1$`Bid Title`[1],paste0(" - Bids : ", most_popular_bid_df1$requests[1]))
bt <- most_popular_bid_df1$`Bid Title`[1]
btb <- most_popular_bid_df1$requests[1]
print(bt)
print(btb)
most_popular_bid_df2 <- df %>% group_by(`Bid Item`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
#bi <- paste0(most_popular_bid_df2$`Bid Item`[1],paste0(" - Bids : ", most_popular_bid_df2$requests[1]))
bi <- most_popular_bid_df2$`Bid Item`[1]
bib <- most_popular_bid_df2$requests[1]
print(bi)
print(bib)
most_popular_df <- data.frame(
Indicator = c("Contact Name", "Bid Title", "Bid Item", "Bidder Name"),
Most_Popular = c(cn, bt, bi, bn),
Bids = c(cnb, btb, bib, bnb)
)
most_popular_bid_df3 <- df %>% group_by(`Bidder Name`) %>%
summarise(requests = n()) %>%
arrange(desc(requests))
#bn <- paste0(most_popular_bid_df3$`Bidder Name`[1],paste0(" - Bids : ", most_popular_bid_df3$requests[1]))
bn <- most_popular_bid_df3$`Bidder Name`[1]
bnb <- most_popular_bid_df3$requests[1]
print(bn)
print(bnb)
most_popular_df <- data.frame(
Indicator = c("Contact Name", "Bid Title", "Bid Item", "Bidder Name"),
Most_Popular = c(cn, bt, bi, bn),
Bids = c(cnb, btb, bib, bnb)
)
most_popular_df
library(DT)
DT::datatable(most_popular_df
rownames = T,
library(DT)
DT::datatable(most_popular_df,
rownames = T,
filter = "top",
options = list(pageLength = 5, scrollX = TRUE, info = FALSE))
library(DT)
DT::datatable(most_popular_df,
rownames = F,
filter = "top",
options = list(pageLength = 5, scrollX = TRUE, info = FALSE))
max(df$`Bid Price`)
print(max(df$`Bid Price`))
options(scipen=999)
print(max(df$`Bid Price`))
print(min(df$`Bid Price`))
print(sd(df$`Bid Price`))
print(mean(df$`Bid Price`))
f1 <- function(num) {
format(num, big.mark = ' ')
}
print(max(f1(df$`Bid Price`)))
options(scipen=999)
f1 <- function(num) {
format(num, big.mark = ' ')
}
print(max(f1(df$`Bid Price`)))
print(min(f1(df$`Bid Price`)))
print(sd(f1(df$`Bid Price`)))
print(f1(mean(df$`Bid Price`)))
print(mean(f1(df$`Bid Price`)))
print(mean(f1(df$`Bid Price`)))
print(max(f1(df$`Bid Price`)))
print(min(df$`Bid Price`))
print(sd(f1(df$`Bid Price`)))
print(f1(sd(df$`Bid Price`)))
print(f1(mean(df$`Bid Price`)))
print(f1(max(df$`Bid Price`)))
print(min(df$`Bid Price`))
print(f1(min(df$`Bid Price`)))
print(f1(sd(df$`Bid Price`)))
print(f1(mean(df$`Bid Price`)))
devtools::install_github("business-science/anomalize")
library(anomalize)
# Data for Anomaly Detection
select(df, c(df$`Bid Opening Date`, df$`Bid Price`))
# Data for Anomaly Detection
select(df, `Bid Opening Date`, `Bid Price`)
# Data for Anomaly Detection
model_df <- select(df, `Bid Opening Date`, `Bid Price`)
model_df
model_df %>%
time_decompose(`Bid Price`, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
model_df %>%
time_decompose(`Bid Price`, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
time_decompose(model_df$`Bid Price`, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
# Data for Anomaly Detection
model_df <- select(df, `Bid Opening Date`, `Bid Price`)
model_df$`Bid Opening Date` <- as.Date(model_df$`Bid Opening Date`)
model_df
model_df %>%
time_decompose(`Bid Price`, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
model_df <- model_df %>% as.tibble()
model_df
model_df %>%
time_decompose(`Bid Price`, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
# Data for Anomaly Detection
model_df <- select(df, `Bid Price`, `Bid Opening Date`)
model_df$`Bid Opening Date` <- as.Date(model_df$`Bid Opening Date`)
model_df <- model_df %>% as.tibble()
model_df
# Data for Anomaly Detection
model_df <- select(df, `Bid Price`, `Bid Opening Date`)
model_df$`Bid Opening Date` <- as.Date(model_df$`Bid Opening Date`)
model_df <- model_df %>% as.tibble()
names(model_df)[1] <- "Price"
names(model_df)[2] <- "date"
# Data for Anomaly Detection
model_df <- select(df, `Bid Price`, `Bid Opening Date`)
model_df$`Bid Opening Date` <- as.Date(model_df$`Bid Opening Date`)
model_df <- model_df %>% as.tibble()
names(model_df)[1] <- "Price"
names(model_df)[2] <- "date"
model_df
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
model_df <- model_df %>%
tibbletime::as_tbl_time(index = date)
model_df
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
knitr::opts_chunk$set(echo = TRUE)
model_df
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
library(tidyverse)
library(plotly)
library(highcharter)
library(readxl)
library(tigerstats)
# tidy anomaly detection
library(anomalize)
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
# tidy anomaly detection
library(anomalize)
library(tidyverse)
library(plotly)
library(highcharter)
library(readxl)
library(tigerstats)
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
remove.packages(rlang)
remove.packages(rlang)
install.packages("rlang")
install.packages("anomalize")
knitr::opts_chunk$set(echo = TRUE)
# tidy anomaly detection
library(anomalize)
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
library(tidyverse)
library(plotly)
library(highcharter)
library(readxl)
library(tigerstats)
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
library(rlang)
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
library(rlang)
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
.libPaths()
install.packages(rlang)
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
# tidy anomaly detection
library(anomalize)
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
library(tidyverse)
library(plotly)
library(highcharter)
library(readxl)
library(tigerstats)
model_df %>%
time_decompose(Price, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
knitr::opts_chunk$set(echo = TRUE)
# Top 5 Highest Average Bid Contact Name
top5_bids <- bid_category_df %>%
slice_head(5)
library(tidyverse)
library(plotly)
library(highcharter)
library(readxl)
library(tigerstats)
# Top 5 Highest Average Bid Contact Name
top5_bids <- bid_category_df %>%
slice_head(5)
# Top 5 Highest Average Bid Contact Name
top5_bids <- bid_category_df %>%
slice_head(n=5)
top5_bids
shiny::runApp()
shiny::runApp()
